# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: practicle
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
  stage: dev
  region: us-east-2
  environment:
    bucketName: ${self:custom.bucketName}

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - s3:*
        - ses:*
      Resource: '*' 
  # apiKeys:
  #   - paid:
  #     - myPaidApiKey
  #   - free:
  #     - myFreeApiKey

  # useagePlan:
  #   - paid:
  #     quota:
  #       limit: 100000
  #       period: MONTH
  #     throttel:
  #       rateLimit: 5
  #       burstLimit: 20
  #   - free:
  #     quota:
  #       limit: 1000
  #       period: MONTH
  #     throttel:
  #       rateLimit: 50
  #       burstLimit: 200
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  bucketName: practicle-dev-serverlessdeploymentbucket-12ci2k540kmbzabs
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: UploadData

functions:
  hello:
    handler: handler.hello 
    events:
      - http:
          path: user/create
          method: POST
          cors: true
          # private: true
  createFile:
    handler: createFile.handler 
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  sendEmail:
    handler: sendEmail.handler 
    events:
      - http:
          path: send-email
          method: POST
          cors: true
  getFile:
    handler: getFile.handler 
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    
    MyAssumeRole:
      Type: AWS::IAM::Role      
      Properties: 
        Path: /
        RoleName: myassumerole
        AssumeRolePolicyDocument:
          Version: "2012-10-17" 
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
                  - apigateway.amazonaws.com
                  - ses.amazonaws.com
              Action:
                - sts:AssumeRole
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes: 
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
